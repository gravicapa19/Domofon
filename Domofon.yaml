substitutions:
  dev_name: Domofon

# код для ESPHome. Логіка дещо змінена в порівнянні з оригіналом. Бібліотеки аудіо скопіюйте з оригінального репозиторію.
# проект https://github.com/SCratORS/SmartIntercom/tree/main
# створення аудіо https://www.narakeet.com/app/text-to-audio/
# перекодування аудіо в WAV, Stereo, 22kHz https://mp3cutterpro.com/uk/audio-converter


#ESP8266 Определение нужных GPIO
  base: esp12e
  led_status:       GPIO2          # Индикатор статуса API, GPIO2 - это встроенный синий светодиод на ESP12
  detect_line:      GPIO16         # Пин детектора вызова
  dis_term:         GPIO12         # Пин "Переключение линии, плата/трубка"
  emul_phone_en:    GPIO13         # Пин "Емуляція піднятої слухавки"
  emul_speaker_en:  GPIO14         # Пин "Емуляція динаміки - не піднятої слухавки"
  audio_out:        GPIO3
  
#input_select_mode_value
  input_select_normal:    "Звичайний"
  input_select_manual:    "Телефоном"
  input_select_reject:    "Авто скидання"
  input_select_accept:    "Авто відкриття"
  input_select_delivery:  "Кур'єр"
  
#line_status_text
  line_status_call:   "Виклик"
  line_status_answer: "Відповідь"
  line_status_open:   "Відкриті двері"
  line_status_reject: "Скидання виклику"
  line_status_close:  "Закрито"

#delay
  call_end_detect_delay: 4000ms     # Интервал между детектированием вызова
  delay_before_answer: 2000ms #1000ms       # Отпределили вызов, *** подождали ***... Передаем управление на плату,
  delay_before_open_door: 2000ms # 100ms     # Воспроизведение аудио закончилось, *** подождали *** ... нажимаем кнопку открытия двери.
  delay_open_on_time: 2000ms #600ms         # Кнопка открытия двери нажата, *** подождали *** ... отпустили кнопку. (Number компонент open_time) 
  delay_after_close_door: 2000ms    # Отпустили кнопку открытия двери, *** подождали *** ... Возвращаем управление на трубку (Number компонент after_close)

#audio_support
  play_user_access_allowed: playFile(audio_player, "/user_access_allowed.wav")
  play_delivery_access_allowed: playFile(audio_player, "/delivery_access_allowed.wav")
  play_access_denied: playFile(audio_player, "/access_denied.wav")

################################################################################################################3  
esphome:
  name: intercom
  friendly_name: Intercom
  platformio_options:
      board_build.f_cpu: 160000000L
      board_build.filesystem: littlefs
      board_build.ldscript: eagle.flash.4m2m.ld   
  on_boot:
    priority: -100
    then:
      - script.execute: boot_script
#*******************************************************
  includes:
    - singlecore_i2s_audio/ESPUtils.h
    - singlecore_i2s_audio/ESPAudio.h
  libraries:
    - SPI
    - ESP8266SdFat
    - SDFS
    - SD
    - ESP8266WiFi
    - LittleFS
    - I2S
    - https://github.com/SCratORS/FTPClientServer
    - ESP8266Audio

esp8266:
  board: esp01_1m
  
# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "QVzRv2xXZlMLEwSl3gqANfVSYWCBnJTY3bd3bl3jRCI="

ota:
  - platform: esphome
    password: "457e7deb9567ad867c7dc9425fb73053"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  #ap:
  #  ssid: "Intercom Fallback Hotspot"
  #  password: "SI8K39O7SsOY"

captive_portal:

external_components: # fix for removal of custom component in esphome 2025.xx and up
  - source: github://esphome/esphome@2024.12.4
    components: [ custom, custom_component ]

custom_component:
  - id: ftp_server
    lambda: 'return {new FTPSrv("","")};' # (Логин, Пароль). По умолчанию anonymous  
  - id: audio_player
    lambda: 'return {new ESPAudio()};'
#  - id: updater
#    lambda: 'return {new FirmwareUpdate()};'




# Глобальные переменные
globals:
  - id: current_mode # поточний режим 
    type: int
    initial_value: '0'
    restore_value: true

  - id: previous_mode # попередній режим для повернення з кур'єра 
    type: int
    initial_value: '0'
    restore_value: 'false'

  - id: status_line
    type: bool
    initial_value: 'false'

#  - id: status_mute
#    type: bool
#    initial_value: 'false'
#    restore_value: true

  - id: status_phone_disable
    type: bool
    initial_value: 'false'
    restore_value: true

#  - id: status_leding
#    type: bool
#    initial_value: 'true'
#    restore_value: true

  - id: status_once_mode
    type: int
    initial_value: '0'
    restore_value: true
  
light:
  - platform: status_led
    id: led_status
    pin: $led_status


# switch_dis_term - змінюється лише при виборі режиму роботи 
# Пошла мазута
script:
  - id: boot_script
    then:
      - logger.log: "Boot config"
      # звичайний режим
      - if:
          condition:
            lambda: 'return id(current_mode) == 0;'
          then:
            - select.set:
                id: mode_select
                option: ${input_select_normal}
            - logger.log: ${input_select_normal}
            - output.turn_off: switch_dis_term      # трубка підключена
            - output.turn_off: switch_emul_phone    # емуляція трубки не підключена  
            - output.turn_off: switch_emul_speaker  # емуляція динаміка не підключена
            - script.stop: boot_script
      # ручний з телефону - без звуку
      - if:
          condition:
            lambda: 'return id(current_mode) == 1;'
          then:
            - select.set:
                id: mode_select
                option: ${input_select_manual}
            - logger.log: ${input_select_manual}
            - output.turn_on: switch_dis_term      # трубка відключена
            - output.turn_off: switch_emul_phone   # емуляція трубки не підключена
            - output.turn_on: switch_emul_speaker  # емуляція динаміка підключена
            - script.stop: boot_script
      # Авто скидання
      - if:
          condition:
            lambda: 'return id(current_mode) == 2;'
          then:
            - select.set:
                id: mode_select
                option: ${input_select_reject}
            - logger.log: ${input_select_reject}
            - output.turn_on: switch_dis_term      # трубка відключена
            - output.turn_off: switch_emul_phone   # емуляція трубки не підключена
            - output.turn_on: switch_emul_speaker  # емуляція динаміка підключена
            - script.stop: boot_script
      # Авто відкриття
      - if:
          condition:
            lambda: 'return id(current_mode) == 3;'
          then:
            - select.set:
                id: mode_select
                option: ${input_select_accept}
            - logger.log: ${input_select_accept}
            - output.turn_on: switch_dis_term      # трубка відключена
            - output.turn_off: switch_emul_phone   # емуляція трубки не підключена
            - output.turn_on: switch_emul_speaker  # емуляція динаміка підключена
            - script.stop: boot_script
      # Кур'єр
      - if:
          condition:
            lambda: 'return id(current_mode) == 4;'
          then:           
            - select.set:
                id: mode_select
                option: ${input_select_delivery}
            - logger.log: ${input_select_delivery}
            - lambda: 'id(status_once_mode) = 1;'
            - output.turn_on: switch_dis_term      # трубка відключена
            - output.turn_off: switch_emul_phone   # емуляція трубки не підключена
            - output.turn_on: switch_emul_speaker  # емуляція динаміка підключена
            - script.stop: boot_script

# Open by request to Phone
  - id: manual_script
    then:
      if:
        condition:
          lambda: 'return id(status_line);'
        then:
          # фактично чекаємо відповіді від користувача
          # або нічого не прийде
          - logger.log: "Manual script. Waiting ansfer from user."


# Reject incoming call
  - id: rejecting
    then:
      if:
        condition:
          lambda: 'return id(status_line);'
        then:
          #  підняти слухавку
          - output.turn_on: switch_emul_phone    # емуляція трубки підключена
          - output.turn_off: switch_emul_speaker # емуляція динаміка не підключена
          - lambda: 'id(line_status).publish_state("${line_status_answer}");'
          - delay: $delay_before_answer # 1000ms 
          # прогать привітання
          - lambda: ${play_access_denied};
          - wait_until:
              lambda: 'return !isPlaying(audio_player);'
          - lambda: 'id(line_status).publish_state("${line_status_reject}");'
          # покласти слухавку
          - output.turn_on: switch_emul_speaker # емуляція динаміка не підключена
          - output.turn_off: switch_emul_phone  # емуляція трубки не підключена
          - lambda: 'id(line_status).publish_state("${line_status_close}");'
          - delay: $delay_after_close_door # 2000ms 


 # Accept incoming call
  - id: accepting
    then:
      if:
        condition:
          lambda: 'return id(status_line);'
        then:
          #  підняти слухавку
          - output.turn_on: switch_emul_phone    # емуляція трубки підключена
          - output.turn_off: switch_emul_speaker # емуляція динаміка не підключена
          - lambda: 'id(line_status).publish_state("${line_status_answer}");'
          # програть привітання
          - delay: $delay_before_open_door
          - lambda: ${play_user_access_allowed};
          - wait_until:
              lambda: 'return !isPlaying(audio_player);'
          # відкрити двері - відключити все
          - output.turn_off: switch_emul_phone    # емуляція трубки відключена
          - lambda: 'id(line_status).publish_state("${line_status_open}");'
          - delay: $delay_open_on_time
          #  повернути слухавку в лінію
          - output.turn_on: switch_emul_phone    # емуляція трубки підключена
          - lambda: 'id(line_status).publish_state("${line_status_reject}");'
          - delay: $delay_after_close_door
          # покласти слухавку
          - output.turn_on: switch_emul_speaker # емуляція динаміка не підключена
          - output.turn_off: switch_emul_phone  # емуляція трубки не підключена
          - lambda: 'id(line_status).publish_state("${line_status_close}");'

  

  # Delivering incoming call
  - id: delivering
    then:
      if:
        condition:
          lambda: 'return id(status_line);'
        then:
          if:
            condition:
              lambda: 'return id(status_once_mode) == 1;'
            then:
              #  підняти слухавку
              - output.turn_on: switch_emul_phone    # емуляція трубки підключена
              - output.turn_off: switch_emul_speaker # емуляція динаміка не підключена
              - lambda: 'id(line_status).publish_state("${line_status_answer}");'
              # прогать привітання
              - delay: $delay_before_open_door
              - lambda: ${play_delivery_access_allowed};
              - wait_until:
                  lambda: 'return !isPlaying(audio_player);'
              # відкрити двері - відключити все
              - output.turn_off: switch_emul_phone    # емуляція трубки відключена
              - lambda: 'id(line_status).publish_state("${line_status_open}");'
              - delay: $delay_open_on_time
              #  повернути слухавку в лінію
              - output.turn_on: switch_emul_phone    # емуляція трубки підключена
              - lambda: 'id(line_status).publish_state("${line_status_reject}");'
              - delay: $delay_after_close_door
              # покласти слухавку
              - output.turn_on: switch_emul_speaker # емуляція динаміка не підключена
              - output.turn_off: switch_emul_phone  # емуляція трубки не підключена
              - lambda: 'id(line_status).publish_state("${line_status_close}");'

#             - script.execute: accepting
              - lambda: 'id(status_once_mode) = 0;'
              # return to previous mode
              - if:
                  condition: 
                    lambda: 'return id(previous_mode) == 0;'
                  then:
                    - select.set:
                        id: mode_select
                        option: ${input_select_normal}
                    - logger.log: "Return to mode ${input_select_normal}"
              - if:
                  condition: 
                    lambda: 'return id(previous_mode) == 1;'
                  then:
                    - select.set:
                        id: mode_select
                        option: ${input_select_manual}
                    - logger.log: "Return to mode ${input_select_manual}"
              - if:
                  condition: 
                    lambda: 'return id(previous_mode) == 2;'
                  then:
                    - select.set:
                        id: mode_select
                        option: ${input_select_reject}
                    - logger.log: "Return to mode ${input_select_reject}"
              - if:
                  condition: 
                    lambda: 'return id(previous_mode) == 3;'
                  then:
                    - select.set:
                        id: mode_select
                        option: ${input_select_accept}
                    - logger.log: "Return to mode ${input_select_accept}"

select:
  - platform: template
    name: ${dev_name}_modes
    icon: "mdi:deskphone"
    optimistic: true
    id: mode_select
    options:
      - ${input_select_normal}
      - ${input_select_manual}
      - ${input_select_reject}
      - ${input_select_accept}
      - ${input_select_delivery}
    initial_option: ${input_select_manual}
    on_value:
      then:
        - lambda: |-
            if (id(mode_select).state == "${input_select_normal}") 
            {
              id(current_mode) = 0;
              id(previous_mode) = 0;
            } 
            else 
              if (id(mode_select).state == "${input_select_manual}") 
              {
                id(current_mode) = 1;
                id(previous_mode) = 1;
              } 
              else 
                if (id(mode_select).state == "${input_select_reject}") 
                {
                  id(current_mode) = 2;
                  id(previous_mode) = 2;
                }
                else 
                  if (id(mode_select).state == "${input_select_accept}") 
                  {
                    id(current_mode) = 3;
                    id(previous_mode) = 3;
                  }
                  else
                    if (id(mode_select).state == "${input_select_delivery}") 
                    {
                      id(current_mode) = 4;
                    }
        - script.execute: boot_script
          
text_sensor:
  - platform: template
    id: line_status
    icon: "mdi:bell"
    name: ${dev_name}_line_status
    lambda: 'return {"${line_status_close}"};'
  - platform: wifi_info
    ip_address:
      name: ${dev_name}_ip
      icon: "mdi:lan"
    mac_address:
      name: ${dev_name}_mac
      icon: "mdi:lan"

sensor:
  - platform: wifi_signal
    name: ${dev_name}_rssi
    update_interval: 600s
    
binary_sensor:
  - platform: gpio
    id: line_detect
    name: ${dev_name}_line_detect
    pin:
      number: $detect_line
      inverted: False
    filters:
      - delayed_off: ${call_end_detect_delay}
    on_press:                                     # INCOMING CALL
      if:
        condition:
          lambda: 'return id(status_line) == false;' # if no call
        then:
          - lambda: 'id(status_line) = true;' # set status incoming call
          - logger.log: "Incoming call detected"
          # normal mode 
          - if:
              condition:  
                lambda: 'return id(current_mode) == 0;' 
              then:
                - script.execute: boot_script
          # manual mode  by mobile
          - if:
              condition:  
                lambda: 'return id(current_mode) == 1;' 
              then:
                - script.execute: manual_script      
          # reject mode 
          - if:
              condition:  
                lambda: 'return id(current_mode) == 2;'
              then:
                - script.execute: rejecting
          # accept mode
          - if:
              condition:  
                lambda: 'return id(current_mode) == 3;'  
              then:
                - script.execute: accepting
          # delivery mode
          - if:
              condition:  
                lambda: 'return id(current_mode) == 4;'  
              then:
                - script.execute: delivering
    on_release:
      - lambda: 'id(status_line) = false;'  # clear status incoming call
      - logger.log: "Incoming call completed"
    on_state:
      lambda: |-
        if (x) {
          id(line_status).publish_state("${line_status_call}");
        } else {
          id(line_status).publish_state("${line_status_close}");
        }   

output:
  - platform: gpio
    id: switch_dis_term
    pin:
      number: $dis_term
      mode: OUTPUT
  - platform: gpio
    id: switch_emul_phone
    pin:
      number: $emul_phone_en
      mode: OUTPUT
  - platform: gpio
    id: switch_emul_speaker
    pin:
      number: $emul_speaker_en
      mode: OUTPUT

button:
  - platform: restart
    name: ${dev_name}_restart
    entity_category: diagnostic
    disabled_by_default: false
    icon: mdi:restart
    device_class: restart

  - platform: template
    name: ${dev_name}_accept_call_btn
    id: accept_call_button
    icon: "mdi:door-open"
    on_press:
      - logger.log: "accept_call button was pressed"
      - script.execute: accepting

  - platform: template
    name: ${dev_name}_reject_call_btn
    id: reject_call
    icon: "mdi:phone-hangup"
    on_press:
      - logger.log: "reject_call button was pressed"
      - script.execute: rejecting
